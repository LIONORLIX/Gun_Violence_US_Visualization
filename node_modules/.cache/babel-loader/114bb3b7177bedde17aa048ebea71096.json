{"ast":null,"code":"// animateScroll.js\nvar pow=Math.pow;// The easing function that makes the scroll decelerate over time\nfunction easeOutQuart(x){return 1-pow(1-x,4);}export function animateScroll(_ref){var targetPosition=_ref.targetPosition,initialPosition=_ref.initialPosition,duration=_ref.duration;var start;var position;var animationFrame;var requestAnimationFrame=window.requestAnimationFrame;var cancelAnimationFrame=window.cancelAnimationFrame;// maximum amount of pixels we can scroll\nvar maxAvailableScroll=document.documentElement.scrollHeight-document.documentElement.clientHeight;var amountOfPixelsToScroll=initialPosition-targetPosition;function step(timestamp){if(start===undefined){start=timestamp;}var elapsed=timestamp-start;// this just gives us a number between 0 (start) and 1 (end)\nvar relativeProgress=elapsed/duration;// ease out that number\nvar easedProgress=easeOutQuart(relativeProgress);// calculate new position for every thick of the requesAnimationFrame\nposition=initialPosition-amountOfPixelsToScroll*Math.min(easedProgress,1);// set the scrollbar position\nwindow.scrollTo(0,position);// Stop when max scroll is reached\nif(initialPosition!==maxAvailableScroll&&window.scrollY===maxAvailableScroll){cancelAnimationFrame(animationFrame);return;}// repeat until the end is reached\nif(elapsed<duration){animationFrame=requestAnimationFrame(step);}}animationFrame=requestAnimationFrame(step);}","map":{"version":3,"sources":["/Users/lion/Documents/GitHub/Gun_Violence_US_Visualization/src/utils/animateScroll.js"],"names":["pow","Math","easeOutQuart","x","animateScroll","targetPosition","initialPosition","duration","start","position","animationFrame","requestAnimationFrame","window","cancelAnimationFrame","maxAvailableScroll","document","documentElement","scrollHeight","clientHeight","amountOfPixelsToScroll","step","timestamp","undefined","elapsed","relativeProgress","easedProgress","min","scrollTo","scrollY"],"mappings":"AAAA;AAEA,GAAMA,CAAAA,GAAG,CAAGC,IAAI,CAACD,GAAjB,CAEA;AACA,QAASE,CAAAA,YAAT,CAAsBC,CAAtB,CAAyB,CACvB,MAAO,GAAIH,GAAG,CAAC,EAAIG,CAAL,CAAQ,CAAR,CAAd,CACD,CAED,MAAO,SAASC,CAAAA,aAAT,MAAsE,IAA7CC,CAAAA,cAA6C,MAA7CA,cAA6C,CAA7BC,eAA6B,MAA7BA,eAA6B,CAAZC,QAAY,MAAZA,QAAY,CAC3E,GAAIC,CAAAA,KAAJ,CACA,GAAIC,CAAAA,QAAJ,CACA,GAAIC,CAAAA,cAAJ,CAEA,GAAMC,CAAAA,qBAAqB,CAAGC,MAAM,CAACD,qBAArC,CACA,GAAME,CAAAA,oBAAoB,CAAGD,MAAM,CAACC,oBAApC,CAEA;AACA,GAAMC,CAAAA,kBAAkB,CACtBC,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CACAF,QAAQ,CAACC,eAAT,CAAyBE,YAF3B,CAIA,GAAMC,CAAAA,sBAAsB,CAAGb,eAAe,CAAGD,cAAjD,CAEA,QAASe,CAAAA,IAAT,CAAcC,SAAd,CAAyB,CACvB,GAAIb,KAAK,GAAKc,SAAd,CAAyB,CACvBd,KAAK,CAAGa,SAAR,CACD,CAED,GAAME,CAAAA,OAAO,CAAGF,SAAS,CAAGb,KAA5B,CAEA;AACA,GAAMgB,CAAAA,gBAAgB,CAAGD,OAAO,CAAGhB,QAAnC,CAEA;AACA,GAAMkB,CAAAA,aAAa,CAAGvB,YAAY,CAACsB,gBAAD,CAAlC,CAEA;AACAf,QAAQ,CACNH,eAAe,CAAGa,sBAAsB,CAAGlB,IAAI,CAACyB,GAAL,CAASD,aAAT,CAAwB,CAAxB,CAD7C,CAGA;AACAb,MAAM,CAACe,QAAP,CAAgB,CAAhB,CAAmBlB,QAAnB,EAEA;AACA,GACEH,eAAe,GAAKQ,kBAApB,EACAF,MAAM,CAACgB,OAAP,GAAmBd,kBAFrB,CAGE,CACAD,oBAAoB,CAACH,cAAD,CAApB,CACA,OACD,CAED;AACA,GAAIa,OAAO,CAAGhB,QAAd,CAAwB,CACtBG,cAAc,CAAGC,qBAAqB,CAACS,IAAD,CAAtC,CACD,CACF,CAEDV,cAAc,CAAGC,qBAAqB,CAACS,IAAD,CAAtC,CACD","sourcesContent":["// animateScroll.js\n\nconst pow = Math.pow;\n\n// The easing function that makes the scroll decelerate over time\nfunction easeOutQuart(x) {\n  return 1 - pow(1 - x, 4);\n}\n\nexport function animateScroll({ targetPosition, initialPosition, duration }) {\n  let start;\n  let position;\n  let animationFrame;\n\n  const requestAnimationFrame = window.requestAnimationFrame;\n  const cancelAnimationFrame = window.cancelAnimationFrame;\n\n  // maximum amount of pixels we can scroll\n  const maxAvailableScroll =\n    document.documentElement.scrollHeight -\n    document.documentElement.clientHeight;\n\n  const amountOfPixelsToScroll = initialPosition - targetPosition;\n\n  function step(timestamp) {\n    if (start === undefined) {\n      start = timestamp;\n    }\n\n    const elapsed = timestamp - start;\n\n    // this just gives us a number between 0 (start) and 1 (end)\n    const relativeProgress = elapsed / duration;\n\n    // ease out that number\n    const easedProgress = easeOutQuart(relativeProgress);\n\n    // calculate new position for every thick of the requesAnimationFrame\n    position =\n      initialPosition - amountOfPixelsToScroll * Math.min(easedProgress, 1);\n\n    // set the scrollbar position\n    window.scrollTo(0, position);\n\n    // Stop when max scroll is reached\n    if (\n      initialPosition !== maxAvailableScroll &&\n      window.scrollY === maxAvailableScroll\n    ) {\n      cancelAnimationFrame(animationFrame);\n      return;\n    }\n\n    // repeat until the end is reached\n    if (elapsed < duration) {\n      animationFrame = requestAnimationFrame(step);\n    }\n  }\n\n  animationFrame = requestAnimationFrame(step);\n}\n"]},"metadata":{},"sourceType":"module"}